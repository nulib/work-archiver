---
openapi: 3.0.0
info:
  version: 2021-08-26T18:55:50Z
  title: "Work Archiver"
paths:
  /archiver:
    post:
      parameters:
        - name: workId
          in: query
          required: true
          schema:
            type: string
        - name: width
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: Validate query string parameters and headers
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        httpMethod: POST
        uri: ${lambda_invocation_arn}
        payloadFormatVersion: "1.0"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
        requestTemplates:
          application/json: >
            ##  See
            http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html

            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload

            #set($allParams = $input.params())

            {

            "body-json" : $input.json('$'),

            "params" : {

            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end

            },

            "stage-variables" : {

            #foreach($key in $stageVariables.keySet())

            "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end

            },

            "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "authorizer-principal-id" : "$context.authorizer.principalId",
                "caller" : "$context.identity.caller",
                "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
x-amazon-apigateway-request-validators:
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
components:
  schemas:
    Empty:
      type: object
      title: Empty Schema
